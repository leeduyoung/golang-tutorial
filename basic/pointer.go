package main

import "fmt"

func PointerTest() {
	// 포인터형 변수 선언
	var numPtr *int     // 포인터형 변수를 선언하면 nil로 초기화 된다.
	fmt.Println(numPtr) // nil

	var numPtr2 *int = new(int) // 빈 포인터형 변수는 바로 사용할 수 없으므로 new 함수로 메모리를 할당한다.
	fmt.Println(numPtr2)        // 메모리 주소. 시스템 마다, 실행할때마다 달라진다.

	// 포인터형 변수에 값을 대입하거나, 가져오려면 역참조를 사용한다.
	// 역참조로 포인터형 변수에 값을 대입
	*numPtr2 = 1
	fmt.Println(numPtr2)
	fmt.Println(*numPtr2) // 포인터형 변수의 값을 가져오기

	// 변수를 선언할때 *를 붙이면 포인터형 변수가 되지만, 변수를 사용할 때 *를 붙이면 역참조가 된다.
	// *numPtr = 1은 numPtr에 저장된 메모리 주소로 접근하여 값을 대입합니다.
	// 그리고 *numPtr은 numPtr에 저장된메모리 주소에 접근하여 값을 가져옵니다.

	// 일반 변수에 참조(레퍼런스)를 사용하면 포인터형 변수에 대입할 수 있다.
	// 변수 앞에 &를 붙이면 해당 변수의 메모리 주소를 뜻한다.
	var num int = 1
	var numPtr3 *int = &num // 참조로 num 변수의 메모리 주소를 구하여 numPtr3 포인터 변수에 대입한다.
	fmt.Println(numPtr3)
	fmt.Println(&num)

	/*
		go의 함수를 사용할때 매개변수로 포인터형 매개변수를 사용하느냐 아니면 일반 자료형을 사용하느냐에 따라서 동작 방식이 달라진다.
		포인터형 매개변수를 사용할 경우 값이 복사되지 않고 현재 인스턴스의 주소가 전달되기 때문에 값의 변경이 발생한다.
		일반 자료형을 사용할 경우 값이 복사되어 전달되기 때문에 전달된 값의 변경은 일어나지 않는다.
		상황에 따라 잘 구분하여 사용해야한다.
	*/
}
